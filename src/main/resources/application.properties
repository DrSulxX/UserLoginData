# Primary DataSource with Hikari settings
spring.datasource.hikari.jdbc-url=${db.url}
spring.datasource.hikari.username=${db.username}
spring.datasource.hikari.password=${db.password}
spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver

# This section defines the primary data source connection settings, including
# the database URL, username, and password for the main database. Hikari is the connection pool used.

# Backup DataSource with Hikari settings
spring.datasource.backup.hikari.jdbc-url=${db.backup.url}
spring.datasource.backup.hikari.username=${db.backup.username}
spring.datasource.backup.hikari.password=${db.backup.password}
spring.datasource.backup.hikari.driver-class-name=com.mysql.cj.jdbc.Driver

# The same settings are applied for the backup data source, which includes 
# the backup database connection URL and credentials.

# Hibernate Settings for Primary Data Source
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
spring.jpa.show-sql=false 
 # Updated to false to prevent SQL logs in production
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Hibernate settings manage how the app interacts with the database schema and entities.
# show-sql is set to false to prevent detailed SQL logs in production.

# Disable detailed SQL logging for production or regular development
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR
logging.level.org.hibernate.type=ERROR

# These settings minimize verbose logging for SQL statements, focusing only on errors.

# Caching Configuration
spring.cache.type=simple

# Basic caching configuration for the app using a simple cache mechanism.

# Papercut SMTP Server Configuration (for local email testing)
spring.mail.host=localhost
spring.mail.port=25
spring.mail.username=
spring.mail.password=
spring.mail.properties.mail.smtp.auth=false
spring.mail.properties.mail.smtp.starttls.enable=false

# Local email testing settings using Papercut SMTP, ensuring no authentication or encryption is needed.

# Logging Configuration
logging.config=classpath:logback.xml
logging.level.org.springframework=INFO
logging.level.ottosulaoja.drsulxx.service=ERROR
logging.level.ottosulaoja.drsulxx=ERROR
logging.level.org.springframework.web=ERROR
logging.level.root=INFO
logging.level.org.springframework.security=INFO
logging.level.org.springframework.core.env=INFO

# Adjusting logging levels to ERROR for non-critical parts of the application, 
# preventing excessive logs and focusing on important issues.

# Reduced Logging Levels for Production Readiness
logging.level.org.hibernate.engine.jdbc.spi.SqlExceptionHelper=ERROR
logging.level.org.springframework.transaction=INFO
logging.level.org.springframework.beans.factory.support=ERROR
logging.level.org.springframework.context.annotation.ClassPathBeanDefinitionScanner=ERROR
logging.level.org.springframework.context.support=ERROR

# Reduced logging levels for Hibernate and Spring components to minimize logs 
# in production, focusing on error-level logs.

# Allow Bean Definition Overriding (if required)
spring.main.allow-bean-definition-overriding=true

# This allows bean definition overriding, useful if different configurations 
# are necessary in specific profiles.

# Allow Circular References (use carefully; remove this line if not needed)
spring.main.allow-circular-references=true

# Enabling circular references can help with specific scenarios but should be used cautiously.

# Disable Hikari logs for production (updated from DEBUG to ERROR)
logging.level.com.zaxxer.hikari=ERROR

# Disabling detailed Hikari logs for production environments, focusing only on errors.

# Spring Security Default User for Admin Purposes
spring.security.user.roles=ROLE_USER,ROLE_ADMIN
spring.security.user.name=admin
spring.security.user.password=ADMIN

# Default credentials for Spring Security to create an admin user for the application.